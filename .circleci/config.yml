version: 2.1
executors:
  python:
    parameters:
      version:
        type: string
        default: latest
    docker:
      - image: circleci/python:<< parameters.version >>

commands:
  setup:
    parameters:
      version:
        type: string
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python<< parameters.version >>

  install-and-cache:
    description: "Install dependencies"
    parameters:
      version:
        type: string
    steps:
      - setup:
          version: << parameters.version >>
      - restore_cache:
          key: python<< parameters.version >>-requirements-{{ checksum "requirements.txt" }}
      - run: pip install -r requirements.txt
      - run: pip install -r requirements_dev.txt
      - run: pip install -e .
      - run: python --version
      - save_cache:
          key: python<< parameters.version >>-requirements-{{ checksum "requirements.txt" }}
          paths:
            - "~/.cache/pip"
            - "/usr/local/lib/python<< parameters.version >>/site-packges"
            - "/usr/local/lib/site-python"

jobs:
  linting:
    parameters:
      version:
        type: string
    executor:
      name: python
      version: << parameters.version >>
    working_directory: ~/lumapps-sdk
    steps:
      - setup:
          version: << parameters.version >>
      - run:
          name: Install dependencies
          command: |
            pip install flake8 flake8_formatter_junit_xml
      - run:
          name: run flake8
          command: |
            mkdir -p test-results
            flake8 lumapps --format junit-xml --output-file test-results/flake8.xml
      - run:
          name: Security checks
          command: |
            pip install bandit
            bandit -r lumapps*
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: flake8-artifacts

  build:
    parameters:
      version:
        type: string
    executor:
      name: python
      version: << parameters.version >>
    working_directory: ~/lumapps-sdk
    steps:
      - install-and-cache:
          version: << parameters.version >>

  test-and-coverage:
    parameters:
      version:
        type: string
    executor:
      name: python
      version: << parameters.version >>
    steps:
      - install-and-cache:
          version: << parameters.version >>
      - run:
          name: Install test and coverage librairies
          command: pip install -r requirements_dev.txt
      - run:
          name: Run tests
          command: |
            mkdir -p test-reports/pytest
            coverage run -m pytest --junitxml=test-results/pytest/results.xml -v
            bash <(curl -s https://codecov.io/bash)
            coverage report

      - store_test_results:
          path: test-results

  extended-linting:
    executor:
      name: python
      version: "3.6"
    working_directory: ~/lumapps-sdk
    steps:
      - setup:
          version: "3.6"
      - run:
          name: Install black and flake8-bugbear
          command: pip install black flake8 flake8_formatter_junit_xml
      - run:
          name: Formatting checks
          command: black --check *.py
      - run:
          name: Bugs checks
          command: |
            mkdir -p test-results
            flake8 lumapps --format junit-xml --output-file test-results/flake8.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: flake8-artifacts


workflows:
  version: 2.1

  CI-python36:
    jobs:
      - build:
          name: "Build-36"
          version: "3.6"

      - linting:
          name: "Linting-36"
          version: "3.6"
          requires:
            - "Build-36"

      - extended-linting:
          name: "Extended linting"
          requires:
            - "Build-36"

      - test-and-coverage:
          name: "Test-36"
          version: "3.6"
          requires:
            - "Build-36"
            - "Linting-36"
            - "Extended linting"

  CI-python37:
    jobs:
      - build:
          name: "Build-37"
          version: "3.7"

      - linting:
          name: "Linting-37"
          version: "3.7"
          requires:
            - "Build-37"

      - extended-linting:
          name: "Extended linting"
          requires:
            - "Build-37"

      - test-and-coverage:
          name: "Test-37"
          version: "3.7"
          requires:
            - "Build-37"
            - "Linting-37"
            - "Extended linting"